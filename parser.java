
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java.io.*;
import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\142\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\003\003\000\002\004\007\000\002\004\007" +
    "\000\002\004\011\000\002\004\004\000\002\004\005\000" +
    "\002\004\007\000\002\004\007\000\002\004\011\000\002" +
    "\004\007\000\002\004\007\000\002\006\003\000\002\006" +
    "\004\000\002\006\005\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\006\006\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\010\005\000\002\010" +
    "\003\000\002\011\007\000\002\011\007\000\002\011\006" +
    "\000\002\011\006\000\002\011\006\000\002\011\005\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\004\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\005\004\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\006\000\002\005\006\000\002\005\010\000\002\005\010" +
    "\000\002\005\007\000\002\005\003\000\002\005\005\000" +
    "\002\005\004\000\002\005\003\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004\000\002\007\005\000" +
    "\002\012\003\000\002\012\005\000\002\012\005\000\002" +
    "\012\007\000\002\012\006\000\002\013\003\000\002\013" +
    "\005\000\002\013\005\000\002\013\007\000\002\013\006" +
    "\000\002\013\012\000\002\014\003\000\002\014\005\000" +
    "\002\014\005\000\002\014\007\000\002\014\006\000\002" +
    "\015\003\000\002\015\005\000\002\016\005\000\002\016" +
    "\003\000\002\017\005\000\002\017\003\000\002\020\005" +
    "\000\002\020\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\054\004\017\005\020\012\012\013\022\014" +
    "\032\016\026\023\004\035\013\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\040\005\020" +
    "\023\004\042\015\043\030\044\005\046\010\047\011\050" +
    "\025\051\024\052\023\053\006\054\021\055\033\056\031" +
    "\057\007\001\002\000\040\005\020\023\004\042\015\043" +
    "\030\044\005\046\010\047\011\050\025\051\024\052\023" +
    "\053\006\054\021\055\033\056\031\057\007\001\002\000" +
    "\054\006\uffc6\007\141\010\uffc6\015\uffc6\017\uffc6\020\uffc6" +
    "\021\140\022\uffc6\023\uffc6\024\uffc6\025\uffc6\026\143\027" +
    "\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\036\uffc6\037\uffc6" +
    "\040\uffc6\041\uffc6\001\002\000\046\006\uffc3\010\uffc3\015" +
    "\uffc3\017\uffc3\020\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3" +
    "\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\036\uffc3\037" +
    "\uffc3\040\uffc3\041\uffc3\001\002\000\004\053\325\001\002" +
    "\000\004\053\305\001\002\000\004\005\301\001\002\000" +
    "\054\004\017\005\020\012\012\013\022\014\032\016\026" +
    "\023\004\035\013\042\015\043\030\044\005\046\010\047" +
    "\011\050\025\051\024\052\023\053\006\054\021\055\033" +
    "\056\031\057\007\001\002\000\004\002\276\001\002\000" +
    "\040\005\020\023\004\042\015\043\030\044\005\046\010" +
    "\047\011\050\025\051\024\052\023\053\006\054\021\055" +
    "\033\056\031\057\007\001\002\000\014\015\274\022\041" +
    "\023\042\024\043\025\044\001\002\000\004\005\262\001" +
    "\002\000\040\005\020\023\004\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\046\006\uffde" +
    "\010\uffde\015\uffde\017\uffde\020\uffde\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\027\uffde\030\uffde\031\uffde\032\uffde\033\uffde" +
    "\036\uffde\037\uffde\040\uffde\041\uffde\001\002\000\054\004" +
    "\017\005\020\012\012\013\022\014\032\016\026\023\004" +
    "\035\013\042\015\043\030\044\005\046\010\047\011\050" +
    "\025\051\024\052\023\053\006\054\021\055\033\056\031" +
    "\057\007\001\002\000\004\053\247\001\002\000\004\053" +
    "\242\001\002\000\004\053\227\001\002\000\004\005\207" +
    "\001\002\000\056\002\001\004\017\005\020\012\012\013" +
    "\022\014\032\016\026\023\004\035\013\042\015\043\030" +
    "\044\005\046\010\047\011\050\025\051\024\052\023\053" +
    "\006\054\021\055\033\056\031\057\007\001\002\000\040" +
    "\005\020\023\004\042\015\043\030\044\005\046\010\047" +
    "\011\050\025\051\024\052\023\053\006\054\021\055\033" +
    "\056\031\057\007\001\002\000\046\006\uffdc\010\uffdc\015" +
    "\uffdc\017\uffdc\020\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\027\uffdc\030\uffdc\031\uffdc\032\uffdc\033\uffdc\036\uffdc\037" +
    "\uffdc\040\uffdc\041\uffdc\001\002\000\004\005\035\001\002" +
    "\000\046\006\uffdd\010\uffdd\015\uffdd\017\uffdd\020\uffdd\022" +
    "\uffdd\023\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\032\uffdd\033\uffdd\036\uffdd\037\uffdd\040\uffdd\041\uffdd\001" +
    "\002\000\060\002\ufffe\004\ufffe\005\ufffe\012\ufffe\013\ufffe" +
    "\014\ufffe\016\ufffe\023\ufffe\035\ufffe\036\ufffe\042\ufffe\043" +
    "\ufffe\044\ufffe\046\ufffe\047\ufffe\050\ufffe\051\ufffe\052\ufffe" +
    "\053\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\001\002\000" +
    "\042\005\020\015\036\023\004\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\042\005\073" +
    "\023\004\034\071\042\015\043\030\044\005\046\010\047" +
    "\011\050\025\051\024\052\023\053\006\054\021\055\033" +
    "\056\031\057\007\001\002\000\004\006\200\001\002\000" +
    "\014\015\045\022\041\023\042\024\043\025\044\001\002" +
    "\000\040\005\020\023\004\042\015\043\030\044\005\046" +
    "\010\047\011\050\025\051\024\052\023\053\006\054\021" +
    "\055\033\056\031\057\007\001\002\000\040\005\020\023" +
    "\004\042\015\043\030\044\005\046\010\047\011\050\025" +
    "\051\024\052\023\053\006\054\021\055\033\056\031\057" +
    "\007\001\002\000\040\005\020\023\004\042\015\043\030" +
    "\044\005\046\010\047\011\050\025\051\024\052\023\053" +
    "\006\054\021\055\033\056\031\057\007\001\002\000\040" +
    "\005\020\023\004\042\015\043\030\044\005\046\010\047" +
    "\011\050\025\051\024\052\023\053\006\054\021\055\033" +
    "\056\031\057\007\001\002\000\044\005\052\023\004\034" +
    "\050\042\015\043\030\044\005\045\046\046\010\047\011" +
    "\050\025\051\024\052\023\053\047\054\021\055\033\056" +
    "\031\057\007\001\002\000\004\053\171\001\002\000\046" +
    "\006\uffc6\007\141\015\uffc6\017\uffc6\020\uffc6\021\140\022" +
    "\uffc6\023\uffc6\024\uffc6\025\uffc6\026\143\027\uffc6\030\uffc6" +
    "\031\uffc6\032\uffc6\033\uffc6\037\137\040\142\001\002\000" +
    "\042\005\073\023\004\034\071\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\040\006\ufff3" +
    "\015\ufff3\017\107\020\112\022\041\023\042\024\043\025" +
    "\044\027\111\030\106\031\104\032\ufff3\033\110\037\ufff3" +
    "\040\ufff3\001\002\000\044\005\052\023\004\034\050\042" +
    "\015\043\030\044\005\045\046\046\010\047\011\050\025" +
    "\051\024\052\023\053\047\054\021\055\033\056\031\057" +
    "\007\001\002\000\012\015\130\032\065\037\064\040\066" +
    "\001\002\000\012\015\060\032\056\037\055\040\057\001" +
    "\002\000\044\005\052\023\004\034\050\042\015\043\030" +
    "\044\005\045\046\046\010\047\011\050\025\051\024\052" +
    "\023\053\047\054\021\055\033\056\031\057\007\001\002" +
    "\000\044\005\052\023\004\034\050\042\015\043\030\044" +
    "\005\045\046\046\010\047\011\050\025\051\024\052\023" +
    "\053\047\054\021\055\033\056\031\057\007\001\002\000" +
    "\044\005\052\023\004\034\050\042\015\043\030\044\005" +
    "\045\046\046\010\047\011\050\025\051\024\052\023\053" +
    "\047\054\021\055\033\056\031\057\007\001\002\000\042" +
    "\005\020\006\uffe1\023\004\042\015\043\030\044\005\046" +
    "\010\047\011\050\025\051\024\052\023\053\006\054\021" +
    "\055\033\056\031\057\007\001\002\000\014\006\uffe3\022" +
    "\041\023\042\024\043\025\044\001\002\000\014\006\uffeb" +
    "\015\uffeb\032\uffeb\037\064\040\uffeb\001\002\000\014\006" +
    "\ufff0\015\ufff0\032\ufff0\037\055\040\ufff0\001\002\000\044" +
    "\005\052\023\004\034\050\042\015\043\030\044\005\045" +
    "\046\046\010\047\011\050\025\051\024\052\023\053\047" +
    "\054\021\055\033\056\031\057\007\001\002\000\042\005" +
    "\073\023\004\034\071\042\015\043\030\044\005\046\010" +
    "\047\011\050\025\051\024\052\023\053\006\054\021\055" +
    "\033\056\031\057\007\001\002\000\044\005\052\023\004" +
    "\034\050\042\015\043\030\044\005\045\046\046\010\047" +
    "\011\050\025\051\024\052\023\053\047\054\021\055\033" +
    "\056\031\057\007\001\002\000\014\006\uffbb\015\uffbb\032" +
    "\uffbb\037\064\040\uffbb\001\002\000\014\006\uffed\015\uffed" +
    "\032\uffed\037\055\040\uffed\001\002\000\042\005\073\023" +
    "\004\034\071\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\026\017\107\020\112\022\041" +
    "\023\042\024\043\025\044\027\111\030\106\031\104\033" +
    "\110\001\002\000\042\005\073\023\004\034\071\042\015" +
    "\043\030\044\005\046\010\047\011\050\025\051\024\052" +
    "\023\053\006\054\021\055\033\056\031\057\007\001\002" +
    "\000\046\006\uffba\010\uffba\015\uffba\017\uffba\020\uffba\022" +
    "\uffba\023\uffba\024\uffba\025\uffba\027\uffba\030\uffba\031\uffba" +
    "\032\065\033\uffba\036\uffba\037\075\040\076\041\uffba\001" +
    "\002\000\042\005\073\023\004\034\071\042\015\043\030" +
    "\044\005\046\010\047\011\050\025\051\024\052\023\053" +
    "\006\054\021\055\033\056\031\057\007\001\002\000\042" +
    "\005\073\023\004\034\071\042\015\043\030\044\005\046" +
    "\010\047\011\050\025\051\024\052\023\053\006\054\021" +
    "\055\033\056\031\057\007\001\002\000\046\006\uffbb\010" +
    "\uffbb\015\uffbb\017\uffbb\020\uffbb\022\uffbb\023\uffbb\024\uffbb" +
    "\025\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\036" +
    "\uffbb\037\075\040\uffbb\041\uffbb\001\002\000\046\006\uffbc" +
    "\010\uffbc\015\uffbc\017\uffbc\020\uffbc\022\uffbc\023\uffbc\024" +
    "\uffbc\025\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc" +
    "\036\uffbc\037\uffbc\040\uffbc\041\uffbc\001\002\000\030\006" +
    "\105\017\107\020\112\022\041\023\042\024\043\025\044" +
    "\027\111\030\106\031\104\033\110\001\002\000\012\006" +
    "\103\032\065\037\075\040\076\001\002\000\046\006\uffb8" +
    "\010\uffb8\015\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8" +
    "\036\uffb8\037\uffb8\040\uffb8\041\uffb8\001\002\000\040\005" +
    "\020\023\004\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\046\006\uffc5\010\uffc5\015\uffc5" +
    "\017\uffc5\020\uffc5\022\uffc5\023\uffc5\024\uffc5\025\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\036\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\001\002\000\040\005\020\023\004\042" +
    "\015\043\030\044\005\046\010\047\011\050\025\051\024" +
    "\052\023\053\006\054\021\055\033\056\031\057\007\001" +
    "\002\000\040\005\020\023\004\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\040\005\020" +
    "\023\004\042\015\043\030\044\005\046\010\047\011\050" +
    "\025\051\024\052\023\053\006\054\021\055\033\056\031" +
    "\057\007\001\002\000\040\005\020\023\004\042\015\043" +
    "\030\044\005\046\010\047\011\050\025\051\024\052\023" +
    "\053\006\054\021\055\033\056\031\057\007\001\002\000" +
    "\040\005\020\023\004\042\015\043\030\044\005\046\010" +
    "\047\011\050\025\051\024\052\023\053\006\054\021\055" +
    "\033\056\031\057\007\001\002\000\046\006\uffc2\010\uffc2" +
    "\015\uffc2\017\uffc2\020\uffc2\022\041\023\042\024\043\025" +
    "\044\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\036\uffc2" +
    "\037\uffc2\040\uffc2\041\uffc2\001\002\000\046\006\uffbe\010" +
    "\uffbe\015\uffbe\017\uffbe\020\uffbe\022\041\023\042\024\043" +
    "\025\044\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\036" +
    "\uffbe\037\uffbe\040\uffbe\041\uffbe\001\002\000\046\006\uffbd" +
    "\010\uffbd\015\uffbd\017\uffbd\020\uffbd\022\041\023\042\024" +
    "\043\025\044\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd" +
    "\036\uffbd\037\uffbd\040\uffbd\041\uffbd\001\002\000\046\006" +
    "\uffc1\010\uffc1\015\uffc1\017\uffc1\020\uffc1\022\041\023\042" +
    "\024\043\025\044\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\001\002\000\046" +
    "\006\uffc0\010\uffc0\015\uffc0\017\uffc0\020\uffc0\022\041\023" +
    "\042\024\043\025\044\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\001\002\000" +
    "\046\006\uffbf\010\uffbf\015\uffbf\017\uffbf\020\uffbf\022\041" +
    "\023\042\024\043\025\044\027\uffbf\030\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\036\uffbf\037\uffbf\040\uffbf\041\uffbf\001\002" +
    "\000\046\006\uffb9\010\uffb9\015\uffb9\017\uffb9\020\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9" +
    "\032\uffb9\033\uffb9\036\uffb9\037\uffb9\040\uffb9\041\uffb9\001" +
    "\002\000\014\006\uffbc\015\uffbc\032\uffbc\037\uffbc\040\uffbc" +
    "\001\002\000\014\006\uffee\015\uffee\032\uffee\037\uffee\040" +
    "\uffee\001\002\000\010\032\065\037\064\040\066\001\002" +
    "\000\014\006\uffef\015\uffef\032\056\037\055\040\057\001" +
    "\002\000\014\006\uffec\015\uffec\032\uffec\037\uffec\040\uffec" +
    "\001\002\000\014\006\ufff1\015\ufff1\032\ufff1\037\ufff1\040" +
    "\ufff1\001\002\000\042\005\020\006\uffe0\023\004\042\015" +
    "\043\030\044\005\046\010\047\011\050\025\051\024\052" +
    "\023\053\006\054\021\055\033\056\031\057\007\001\002" +
    "\000\014\006\uffe4\022\041\023\042\024\043\025\044\001" +
    "\002\000\036\006\105\017\107\020\112\022\041\023\042" +
    "\024\043\025\044\027\111\030\106\031\104\032\ufff3\033" +
    "\110\037\ufff3\040\ufff3\001\002\000\012\006\103\032\065" +
    "\037\064\040\066\001\002\000\012\006\135\032\056\037" +
    "\055\040\057\001\002\000\014\006\uffe7\015\uffe7\032\uffe7" +
    "\037\uffe7\040\uffe7\001\002\000\040\006\ufff2\015\ufff2\017" +
    "\107\020\112\022\041\023\042\024\043\025\044\027\111" +
    "\030\106\031\104\032\ufff2\033\110\037\ufff2\040\ufff2\001" +
    "\002\000\044\005\052\023\004\034\050\042\015\043\030" +
    "\044\005\045\046\046\010\047\011\050\025\051\024\052" +
    "\023\053\047\054\021\055\033\056\031\057\007\001\002" +
    "\000\046\006\uffc4\010\uffc4\015\uffc4\017\uffc4\020\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\001" +
    "\002\000\040\005\020\023\004\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\160\055\033\056\031\057\007\001\002\000\044\005\052" +
    "\023\004\034\050\042\015\043\030\044\005\045\046\046" +
    "\010\047\011\050\025\051\024\052\023\053\047\054\021" +
    "\055\033\056\031\057\007\001\002\000\046\005\073\023" +
    "\004\034\145\035\144\042\015\043\030\044\005\046\010" +
    "\047\011\050\025\051\024\052\023\053\006\054\021\055" +
    "\033\056\031\057\007\060\147\001\002\000\040\005\020" +
    "\023\004\042\015\043\030\044\005\046\010\047\011\050" +
    "\025\051\024\052\023\053\006\054\021\055\033\056\031" +
    "\057\007\001\002\000\042\005\073\023\004\034\071\042" +
    "\015\043\030\044\005\046\010\047\011\050\025\051\024" +
    "\052\023\053\006\054\021\055\033\056\031\057\007\001" +
    "\002\000\046\006\uffce\010\uffce\015\uffce\017\uffce\020\112" +
    "\022\041\023\042\024\043\025\044\027\111\030\106\031" +
    "\104\032\uffce\033\110\036\uffce\037\uffce\040\uffce\041\uffce" +
    "\001\002\000\046\006\uffcd\010\uffcd\015\uffcd\017\uffcd\020" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\032\uffcd\033\uffcd\036\uffcd\037\uffcd\040\uffcd\041" +
    "\uffcd\001\002\000\046\006\uffcc\010\uffcc\015\uffcc\017\uffcc" +
    "\020\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\027\uffcc\030" +
    "\uffcc\031\uffcc\032\uffcc\033\uffcc\036\uffcc\037\075\040\076" +
    "\041\uffcc\001\002\000\046\006\uffcb\010\uffcb\015\uffcb\017" +
    "\uffcb\020\112\022\041\023\042\024\043\025\044\027\111" +
    "\030\106\031\104\032\uffcb\033\110\036\uffcb\037\uffcb\040" +
    "\uffcb\041\uffcb\001\002\000\016\022\041\023\042\024\043" +
    "\025\044\036\uffa4\041\155\001\002\000\004\036\154\001" +
    "\002\000\046\006\uffc7\010\uffc7\015\uffc7\017\uffc7\020\uffc7" +
    "\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030\uffc7\031" +
    "\uffc7\032\uffc7\033\uffc7\036\uffc7\037\uffc7\040\uffc7\041\uffc7" +
    "\001\002\000\040\005\020\023\004\042\015\043\030\044" +
    "\005\046\010\047\011\050\025\051\024\052\023\053\006" +
    "\054\021\055\033\056\031\057\007\001\002\000\004\036" +
    "\uffa5\001\002\000\014\006\uffe9\015\uffe9\032\uffe9\037\055" +
    "\040\uffe9\001\002\000\014\010\165\022\uffde\023\uffde\024" +
    "\uffde\025\uffde\001\002\000\014\010\162\022\041\023\042" +
    "\024\043\025\044\001\002\000\050\006\uffca\010\uffca\015" +
    "\uffca\017\uffca\020\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\163\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\001\002\000\040\005\020" +
    "\023\004\042\015\043\030\044\005\046\010\047\011\050" +
    "\025\051\024\052\023\053\006\054\021\055\033\056\031" +
    "\057\007\001\002\000\046\006\uffc8\010\uffc8\015\uffc8\017" +
    "\uffc8\020\uffc8\022\041\023\042\024\043\025\044\027\uffc8" +
    "\030\uffc8\031\uffc8\032\uffc8\033\uffc8\036\uffc8\037\uffc8\040" +
    "\uffc8\041\uffc8\001\002\000\004\026\166\001\002\000\040" +
    "\005\020\023\004\042\015\043\030\044\005\046\010\047" +
    "\011\050\025\051\024\052\023\053\006\054\021\055\033" +
    "\056\031\057\007\001\002\000\046\006\uffc9\010\uffc9\015" +
    "\uffc9\017\uffc9\020\uffc9\022\041\023\042\024\043\025\044" +
    "\027\uffc9\030\uffc9\031\uffc9\032\uffc9\033\uffc9\036\uffc9\037" +
    "\uffc9\040\uffc9\041\uffc9\001\002\000\014\006\uffe8\015\uffe8" +
    "\032\uffe8\037\uffe8\040\uffe8\001\002\000\004\041\172\001" +
    "\002\000\044\005\052\023\004\034\050\042\015\043\030" +
    "\044\005\045\046\046\010\047\011\050\025\051\024\052" +
    "\023\053\047\054\021\055\033\056\031\057\007\001\002" +
    "\000\014\006\uffea\015\uffea\032\uffea\037\uffea\040\uffea\001" +
    "\002\000\046\006\uffd1\010\uffd1\015\uffd1\017\uffd1\020\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\036\uffd1\037\uffd1\040\uffd1\041\uffd1" +
    "\001\002\000\046\006\uffd0\010\uffd0\015\uffd0\017\uffd0\020" +
    "\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\032\uffd0\033\uffd0\036\uffd0\037\uffd0\040\uffd0\041" +
    "\uffd0\001\002\000\046\006\uffd2\010\uffd2\015\uffd2\017\uffd2" +
    "\020\uffd2\022\uffd2\023\uffd2\024\043\025\044\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\036\uffd2\037\uffd2\040\uffd2" +
    "\041\uffd2\001\002\000\046\006\uffd3\010\uffd3\015\uffd3\017" +
    "\uffd3\020\uffd3\022\uffd3\023\uffd3\024\043\025\044\027\uffd3" +
    "\030\uffd3\031\uffd3\032\uffd3\033\uffd3\036\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\001\002\000\054\004\017\005\020\012\012" +
    "\013\022\014\032\016\026\023\004\035\013\042\015\043" +
    "\030\044\005\046\010\047\011\050\025\051\024\052\023" +
    "\053\006\054\021\055\033\056\031\057\007\001\002\000" +
    "\062\002\ufff4\004\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4" +
    "\014\ufff4\016\ufff4\023\ufff4\035\ufff4\036\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\046\ufff4\047\ufff4\050\ufff4\051\ufff4\052\ufff4" +
    "\053\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\001\002\000" +
    "\012\015\203\032\065\037\075\040\076\001\002\000\042" +
    "\005\020\006\uffdf\023\004\042\015\043\030\044\005\046" +
    "\010\047\011\050\025\051\024\052\023\053\006\054\021" +
    "\055\033\056\031\057\007\001\002\000\014\006\uffe2\022" +
    "\041\023\042\024\043\025\044\001\002\000\046\006\uffd5" +
    "\010\uffd5\015\uffd5\017\uffd5\020\uffd5\022\uffd5\023\uffd5\024" +
    "\uffd5\025\uffd5\027\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5" +
    "\036\uffd5\037\uffd5\040\uffd5\041\uffd5\001\002\000\060\002" +
    "\uffff\004\uffff\005\uffff\012\uffff\013\uffff\014\uffff\016\uffff" +
    "\023\uffff\035\uffff\036\uffff\042\uffff\043\uffff\044\uffff\046" +
    "\uffff\047\uffff\050\uffff\051\uffff\052\uffff\053\uffff\054\uffff" +
    "\055\uffff\056\uffff\057\uffff\001\002\000\044\005\073\023" +
    "\004\034\071\035\210\042\015\043\030\044\005\046\010" +
    "\047\011\050\025\051\024\052\023\053\006\054\021\055" +
    "\033\056\031\057\007\001\002\000\040\005\020\023\004" +
    "\042\015\043\030\044\005\046\010\047\011\050\025\051" +
    "\024\052\023\053\006\054\021\055\033\056\031\057\007" +
    "\001\002\000\030\006\215\017\107\020\112\022\041\023" +
    "\042\024\043\025\044\027\111\030\106\031\104\033\110" +
    "\001\002\000\012\006\213\032\065\037\075\040\076\001" +
    "\002\000\004\015\214\001\002\000\062\002\ufffc\004\ufffc" +
    "\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\016\ufffc\023" +
    "\ufffc\035\ufffc\036\ufffc\042\ufffc\043\ufffc\044\ufffc\046\ufffc" +
    "\047\ufffc\050\ufffc\051\ufffc\052\ufffc\053\ufffc\054\ufffc\055" +
    "\ufffc\056\ufffc\057\ufffc\001\002\000\004\015\216\001\002" +
    "\000\062\002\ufffd\004\ufffd\005\ufffd\011\ufffd\012\ufffd\013" +
    "\ufffd\014\ufffd\016\ufffd\023\ufffd\035\ufffd\036\ufffd\042\ufffd" +
    "\043\ufffd\044\ufffd\046\ufffd\047\ufffd\050\ufffd\051\ufffd\052" +
    "\ufffd\053\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\001\002" +
    "\000\016\022\041\023\042\024\043\025\044\036\uffa2\041" +
    "\224\001\002\000\004\036\221\001\002\000\004\006\222" +
    "\001\002\000\004\015\223\001\002\000\062\002\ufffb\004" +
    "\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\016\ufffb" +
    "\023\ufffb\035\ufffb\036\ufffb\042\ufffb\043\ufffb\044\ufffb\046" +
    "\ufffb\047\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb" +
    "\055\ufffb\056\ufffb\057\ufffb\001\002\000\040\005\020\023" +
    "\004\042\015\043\030\044\005\046\010\047\011\050\025" +
    "\051\024\052\023\053\006\054\021\055\033\056\031\057" +
    "\007\001\002\000\004\036\uffa3\001\002\000\046\006\uffd8" +
    "\010\uffd8\015\uffd8\017\uffd8\020\uffd8\022\uffd8\023\uffd8\024" +
    "\uffd8\025\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033\uffd8" +
    "\036\uffd8\037\uffd8\040\uffd8\041\uffd8\001\002\000\052\006" +
    "\uffac\007\231\010\uffac\015\uffac\017\uffac\020\uffac\022\uffac" +
    "\023\uffac\024\uffac\025\uffac\026\232\027\uffac\030\uffac\031" +
    "\uffac\032\uffac\033\uffac\036\uffac\037\uffac\040\uffac\041\230" +
    "\001\002\000\004\053\227\001\002\000\004\054\236\001" +
    "\002\000\040\005\020\023\004\042\015\043\030\044\005" +
    "\046\010\047\011\050\025\051\024\052\023\053\006\054" +
    "\021\055\033\056\031\057\007\001\002\000\046\006\uffaa" +
    "\010\uffaa\015\uffaa\017\uffaa\020\uffaa\022\041\023\042\024" +
    "\043\025\044\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa" +
    "\036\uffaa\037\uffaa\040\uffaa\041\234\001\002\000\004\053" +
    "\227\001\002\000\046\006\uffa9\010\uffa9\015\uffa9\017\uffa9" +
    "\020\uffa9\022\uffa9\023\uffa9\024\uffa9\025\uffa9\027\uffa9\030" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\001\002\000\004\010\237\001\002\000\046\006" +
    "\uffa8\010\uffa8\015\uffa8\017\uffa8\020\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\001\002\000\046" +
    "\006\uffab\010\uffab\015\uffab\017\uffab\020\uffab\022\uffab\023" +
    "\uffab\024\uffab\025\uffab\027\uffab\030\uffab\031\uffab\032\uffab" +
    "\033\uffab\036\uffab\037\uffab\040\uffab\041\uffab\001\002\000" +
    "\046\006\uffd7\010\uffd7\015\uffd7\017\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\001\002" +
    "\000\004\026\243\001\002\000\040\005\020\023\004\042" +
    "\015\043\030\044\005\046\010\047\011\050\025\051\024" +
    "\052\023\053\006\054\021\055\033\056\031\057\007\001" +
    "\002\000\046\006\uffa1\010\uffa1\015\uffa1\017\uffa1\020\uffa1" +
    "\022\041\023\042\024\043\025\044\027\uffa1\030\uffa1\031" +
    "\uffa1\032\uffa1\033\uffa1\036\uffa1\037\uffa1\040\uffa1\041\245" +
    "\001\002\000\004\053\242\001\002\000\046\006\uffa0\010" +
    "\uffa0\015\uffa0\017\uffa0\020\uffa0\022\uffa0\023\uffa0\024\uffa0" +
    "\025\uffa0\027\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\036" +
    "\uffa0\037\uffa0\040\uffa0\041\uffa0\001\002\000\046\006\uffa7" +
    "\010\uffa7\015\uffa7\017\uffa7\020\uffa7\022\uffa7\023\uffa7\024" +
    "\uffa7\025\uffa7\027\uffa7\030\uffa7\031\uffa7\032\uffa7\033\uffa7" +
    "\036\uffa7\037\uffa7\040\uffa7\041\251\001\002\000\046\006" +
    "\uffd9\010\uffd9\015\uffd9\017\uffd9\020\uffd9\022\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033" +
    "\uffd9\036\uffd9\037\uffd9\040\uffd9\041\uffd9\001\002\000\004" +
    "\053\247\001\002\000\046\006\uffa6\010\uffa6\015\uffa6\017" +
    "\uffa6\020\uffa6\022\uffa6\023\uffa6\024\uffa6\025\uffa6\027\uffa6" +
    "\030\uffa6\031\uffa6\032\uffa6\033\uffa6\036\uffa6\037\uffa6\040" +
    "\uffa6\041\uffa6\001\002\000\004\012\254\001\002\000\004" +
    "\005\255\001\002\000\042\005\073\023\004\034\071\042" +
    "\015\043\030\044\005\046\010\047\011\050\025\051\024" +
    "\052\023\053\006\054\021\055\033\056\031\057\007\001" +
    "\002\000\012\006\257\032\065\037\075\040\076\001\002" +
    "\000\004\015\260\001\002\000\062\002\ufff6\004\ufff6\005" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\016\ufff6\023\ufff6" +
    "\035\ufff6\036\ufff6\042\ufff6\043\ufff6\044\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\055\ufff6" +
    "\056\ufff6\057\ufff6\001\002\000\014\006\105\022\041\023" +
    "\042\024\043\025\044\001\002\000\044\005\052\023\004" +
    "\034\050\042\015\043\030\044\005\045\046\046\010\047" +
    "\011\050\025\051\024\052\023\053\047\054\021\055\033" +
    "\056\031\057\007\001\002\000\012\006\272\032\065\037" +
    "\064\040\066\001\002\000\012\006\265\032\056\037\055" +
    "\040\057\001\002\000\054\004\017\005\020\012\012\013" +
    "\022\014\032\016\026\023\004\035\013\042\015\043\030" +
    "\044\005\046\010\047\011\050\025\051\024\052\023\053" +
    "\006\054\021\055\033\056\031\057\007\001\002\000\062" +
    "\002\ufff7\004\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014" +
    "\ufff7\016\ufff7\023\ufff7\035\ufff7\036\ufff7\042\ufff7\043\ufff7" +
    "\044\ufff7\046\ufff7\047\ufff7\050\ufff7\051\ufff7\052\ufff7\053" +
    "\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7\001\002\000\062" +
    "\002\uffe5\004\uffe5\005\uffe5\011\270\012\uffe5\013\uffe5\014" +
    "\uffe5\016\uffe5\023\uffe5\035\uffe5\036\uffe5\042\uffe5\043\uffe5" +
    "\044\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\053" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\001\002\000\054" +
    "\004\017\005\020\012\012\013\022\014\032\016\026\023" +
    "\004\035\013\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\062\002\uffe6\004\uffe6\005\uffe6" +
    "\011\uffe6\012\uffe6\013\uffe6\014\uffe6\016\uffe6\023\uffe6\035" +
    "\uffe6\036\uffe6\042\uffe6\043\uffe6\044\uffe6\046\uffe6\047\uffe6" +
    "\050\uffe6\051\uffe6\052\uffe6\053\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\001\002\000\054\004\017\005\020\012\012" +
    "\013\022\014\032\016\026\023\004\035\013\042\015\043" +
    "\030\044\005\046\010\047\011\050\025\051\024\052\023" +
    "\053\006\054\021\055\033\056\031\057\007\001\002\000" +
    "\062\002\ufff8\004\ufff8\005\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\014\ufff8\016\ufff8\023\ufff8\035\ufff8\036\ufff8\042\ufff8\043" +
    "\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052\ufff8" +
    "\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\001\002\000" +
    "\062\002\ufffa\004\ufffa\005\ufffa\011\ufffa\012\ufffa\013\ufffa" +
    "\014\ufffa\016\ufffa\023\ufffa\035\ufffa\036\ufffa\042\ufffa\043" +
    "\ufffa\044\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\001\002\000" +
    "\046\006\uffd6\010\uffd6\015\uffd6\017\uffd6\020\uffd6\022\uffd6" +
    "\023\uffd6\024\uffd6\025\uffd6\027\uffd6\030\uffd6\031\uffd6\032" +
    "\uffd6\033\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\001\002" +
    "\000\004\002\000\001\002\000\056\004\017\005\020\012" +
    "\012\013\022\014\032\016\026\023\004\035\013\036\300" +
    "\042\015\043\030\044\005\046\010\047\011\050\025\051" +
    "\024\052\023\053\006\054\021\055\033\056\031\057\007" +
    "\001\002\000\062\002\ufff9\004\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\016\ufff9\023\ufff9\035\ufff9\036\ufff9" +
    "\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9\051" +
    "\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9" +
    "\001\002\000\042\005\073\023\004\034\071\042\015\043" +
    "\030\044\005\046\010\047\011\050\025\051\024\052\023" +
    "\053\006\054\021\055\033\056\031\057\007\001\002\000" +
    "\012\006\303\032\065\037\075\040\076\001\002\000\054" +
    "\004\017\005\020\012\012\013\022\014\032\016\026\023" +
    "\004\035\013\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\062\002\ufff5\004\ufff5\005\ufff5" +
    "\011\ufff5\012\ufff5\013\ufff5\014\ufff5\016\ufff5\023\ufff5\035" +
    "\ufff5\036\ufff5\042\ufff5\043\ufff5\044\ufff5\046\ufff5\047\ufff5" +
    "\050\ufff5\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056" +
    "\ufff5\057\ufff5\001\002\000\052\006\uffb2\007\310\010\uffb2" +
    "\015\uffb2\017\uffb2\020\uffb2\022\uffb2\023\uffb2\024\uffb2\025" +
    "\uffb2\026\311\027\uffb2\030\uffb2\031\uffb2\032\uffb2\033\uffb2" +
    "\036\uffb2\037\uffb2\040\uffb2\041\307\001\002\000\046\006" +
    "\uffda\010\uffda\015\uffda\017\uffda\020\uffda\022\uffda\023\uffda" +
    "\024\uffda\025\uffda\027\uffda\030\uffda\031\uffda\032\uffda\033" +
    "\uffda\036\uffda\037\uffda\040\uffda\041\uffda\001\002\000\004" +
    "\053\305\001\002\000\004\054\315\001\002\000\040\005" +
    "\020\023\004\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\046\006\uffb0\010\uffb0\015\uffb0" +
    "\017\uffb0\020\uffb0\022\041\023\042\024\043\025\044\027" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\036\uffb0\037\uffb0" +
    "\040\uffb0\041\313\001\002\000\004\053\305\001\002\000" +
    "\046\006\uffaf\010\uffaf\015\uffaf\017\uffaf\020\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\033\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\001\002" +
    "\000\004\010\316\001\002\000\050\006\uffae\010\uffae\015" +
    "\uffae\017\uffae\020\uffae\022\uffae\023\uffae\024\uffae\025\uffae" +
    "\026\317\027\uffae\030\uffae\031\uffae\032\uffae\033\uffae\036" +
    "\uffae\037\uffae\040\uffae\041\uffae\001\002\000\004\035\320" +
    "\001\002\000\040\005\020\023\004\042\015\043\030\044" +
    "\005\046\010\047\011\050\025\051\024\052\023\053\006" +
    "\054\021\055\033\056\031\057\007\001\002\000\004\036" +
    "\322\001\002\000\046\006\uffad\010\uffad\015\uffad\017\uffad" +
    "\020\uffad\022\uffad\023\uffad\024\uffad\025\uffad\027\uffad\030" +
    "\uffad\031\uffad\032\uffad\033\uffad\036\uffad\037\uffad\040\uffad" +
    "\041\uffad\001\002\000\046\006\uffb1\010\uffb1\015\uffb1\017" +
    "\uffb1\020\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1" +
    "\030\uffb1\031\uffb1\032\uffb1\033\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\001\002\000\046\006\uffdb\010\uffdb\015\uffdb" +
    "\017\uffdb\020\uffdb\022\uffdb\023\uffdb\024\uffdb\025\uffdb\027" +
    "\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\036\uffdb\037\uffdb" +
    "\040\uffdb\041\uffdb\001\002\000\052\006\uffb7\007\327\010" +
    "\uffb7\015\uffb7\017\uffb7\020\uffb7\022\uffb7\023\uffb7\024\uffb7" +
    "\025\uffb7\026\330\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033" +
    "\uffb7\036\uffb7\037\uffb7\040\uffb7\041\326\001\002\000\004" +
    "\053\325\001\002\000\004\054\334\001\002\000\040\005" +
    "\020\023\004\042\015\043\030\044\005\046\010\047\011" +
    "\050\025\051\024\052\023\053\006\054\021\055\033\056" +
    "\031\057\007\001\002\000\046\006\uffb5\010\uffb5\015\uffb5" +
    "\017\uffb5\020\uffb5\022\041\023\042\024\043\025\044\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\036\uffb5\037\uffb5" +
    "\040\uffb5\041\332\001\002\000\004\053\325\001\002\000" +
    "\046\006\uffb4\010\uffb4\015\uffb4\017\uffb4\020\uffb4\022\uffb4" +
    "\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032" +
    "\uffb4\033\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4\001\002" +
    "\000\004\010\335\001\002\000\046\006\uffb3\010\uffb3\015" +
    "\uffb3\017\uffb3\020\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3" +
    "\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\036\uffb3\037" +
    "\uffb3\040\uffb3\041\uffb3\001\002\000\046\006\uffb6\010\uffb6" +
    "\015\uffb6\017\uffb6\020\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\036\uffb6" +
    "\037\uffb6\040\uffb6\041\uffb6\001\002\000\046\006\uffd4\010" +
    "\uffd4\015\uffd4\017\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4" +
    "\025\uffd4\027\uffd4\030\uffd4\031\uffd4\032\uffd4\033\uffd4\036" +
    "\uffd4\037\uffd4\040\uffd4\041\uffd4\001\002\000\046\006\uffcf" +
    "\010\uffcf\015\uffcf\017\uffcf\020\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\041\uffcf\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\012\002\013\003\026\004\033\005\015\001" +
    "\001\000\004\005\337\001\001\000\004\005\336\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\323\001" +
    "\001\000\004\013\305\001\001\000\002\001\001\000\010" +
    "\003\276\004\033\005\015\001\001\000\002\001\001\000" +
    "\004\005\274\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\260\001\001\000\002\001\001\000\006\004" +
    "\252\005\015\001\001\000\004\015\247\001\001\000\004" +
    "\020\240\001\001\000\004\014\225\001\001\000\002\001" +
    "\001\000\006\004\205\005\015\001\001\000\004\005\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\037\011\036\001\001" +
    "\000\006\005\071\007\201\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\176\001\001\000\004\005\175" +
    "\001\001\000\004\005\174\001\001\000\004\005\173\001" +
    "\001\000\010\005\050\006\053\007\052\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\135\007\120\001" +
    "\001\000\002\001\001\000\010\005\131\006\133\007\132" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\005" +
    "\050\006\126\007\125\001\001\000\010\005\050\006\124" +
    "\007\123\001\001\000\010\005\050\006\062\007\061\001" +
    "\001\000\004\005\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\050\006\122\007" +
    "\121\001\001\000\006\005\071\007\073\001\001\000\010" +
    "\005\050\006\067\007\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\071\007\120\001\001\000\002" +
    "\001\001\000\006\005\100\007\101\001\001\000\002\001" +
    "\001\000\006\005\071\007\077\001\001\000\006\005\071" +
    "\007\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\117\001\001\000\002\001\001\000\004\005\116\001" +
    "\001\000\004\005\115\001\001\000\004\005\114\001\001" +
    "\000\004\005\113\001\001\000\004\005\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\005\050\006\167\007\123\001\001" +
    "\000\002\001\001\000\004\005\160\001\001\000\010\005" +
    "\050\006\156\007\123\001\001\000\006\005\145\007\147" +
    "\001\001\000\006\005\151\016\152\001\001\000\006\005" +
    "\150\007\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\151\016\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\163" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\166\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\050\006\172\007\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\004\200\005\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\203" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\005\210\007\211\001\001\000\006\005\216" +
    "\017\217\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\216" +
    "\017\224\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\237\001\001\000\002\001\001" +
    "\000\004\005\232\001\001\000\002\001\001\000\004\014" +
    "\234\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\243\001\001\000\002\001\001\000\004" +
    "\020\245\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\251\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\005\071\007" +
    "\255\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\005\050\006\263\007" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\004\266\005\015\010\265\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\004\270\005\015\001\001\000\002" +
    "\001\001\000\010\004\266\005\015\010\272\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\205\005\015\001\001\000\002\001" +
    "\001\000\006\005\071\007\301\001\001\000\002\001\001" +
    "\000\006\004\303\005\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\322\001\001" +
    "\000\002\001\001\000\004\005\311\001\001\000\002\001" +
    "\001\000\004\013\313\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\005" +
    "\151\016\320\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\335\001\001\000\002\001\001\000\004\005\330" +
    "\001\001\000\002\001\001\000\004\012\332\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.err.println("Error token " + s);
    }

    public void unrecovered_syntax_error(Symbol s){
        System.err.println("Error token " + s);
        done_parsing();
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // ini ::= listaSent 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 AST a = new AST("ini", e, null); a.gc(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= ini EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // listaSent ::= listaSent sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // listaSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("sent", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaSent",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sent ::= PRINT AP exp CP PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("print", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sent ::= PRINT AP cond CP PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("printcond", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sent ::= PRINT AP ALL pArrayIni CLL CP PYC 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		 RESULT = new AST("printArray", a ,null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sent ::= exp PYC 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // sent ::= ALL listaSent CLL 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // sent ::= IF AP cond CP elseSent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", c, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sent ::= IF AP boolexp CP elseSent 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("if", b, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // sent ::= DO sent WHILE AP cond CP PYC 
            {
              AST RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new AST("doWhile",c,s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // sent ::= WHILE AP cond CP sent 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("while",c,s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // sent ::= FOR AP expFor CP sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST s = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("for", e, s);  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sent",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // boolexp ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("bool", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // boolexp ::= NOT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", new AST("bool", e, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // boolexp ::= boolexp AND boolexp 
            {
              AST RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // boolexp ::= boolexp OR boolexp 
            {
              AST RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", b1, b2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // boolexp ::= boolexp IMPLICA boolexp 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("implica", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // boolexp ::= cond AND boolexp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // boolexp ::= cond OR boolexp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", c, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // boolexp ::= boolexp AND cond 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // boolexp ::= boolexp OR cond 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", b, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // boolexp ::= FORALL IDENT COMA boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("forall", new AST(i, null, null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // boolexp ::= IDENT OR boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", new AST("bool", new AST(i,null, null),null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // boolexp ::= IDENT AND boolexp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", new AST("bool", new AST(i,null, null),null), b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // boolexp ::= AP boolexp CP 
            {
              AST RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("boolexp",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // elseSent ::= sent ELSE sent 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // elseSent ::= sent 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("else", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("elseSent",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expFor ::= exp PYC cond PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expFor ::= exp PYC boolexp PYC exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", b, new AST("aux", e1, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expFor ::= PYC cond PYC exp 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, e2)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expFor ::= exp PYC boolexp PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST b = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", b, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expFor ::= exp PYC cond PYC 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", e1, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expFor ::= PYC cond PYC 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("expFor", c, new AST("aux", null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expFor",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= NUM 
            {
              AST RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("num", new AST(n, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= REAL 
            {
              AST RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("real", new AST(r, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp ::= ASCII 
            {
              AST RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ascii", new AST(a, null, null), null ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp ::= INT listaEnteros 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("int", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp ::= CHAR listaChar 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("char", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp ::= BOOLEAN listaBool 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolean", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= FLOAT listaReales 
            {
              AST RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("float", l, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= STRING expString 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("string", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= CASTCHAR exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castChar", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= CASTINT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castInt", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= CASTFLOAT exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("castFloat", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= exp MAS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mas", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= exp MENOS exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menos", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= exp POR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("por", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= exp DIV exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("div", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= MENOS exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menosUnario", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asig", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // exp ::= IDENT ASIG TRUE 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), new AST(t, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // exp ::= IDENT ASIG cond 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // exp ::= IDENT ASIG NOT exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigBool", new AST(i, null, null), new AST("not", e, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // exp ::= IDENT AC exp CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayPos", new AST(i, null, null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // exp ::= IDENT AC NUM CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, new AST(n, null, null), null), e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // exp ::= IDENT AC exp CC ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayAsig", new AST(i, e1, null), e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // exp ::= IDENT ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniArray", new AST(i, null, null), a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // exp ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("ident", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // exp ::= AP exp CP 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exp ::= IDENT LENGTH 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("length", new AST(i, null, null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // exp ::= CADENA 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("cadena", null, new AST(c, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // cond ::= exp IGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("igual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // cond ::= exp DIF exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("distinto", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // cond ::= exp MENOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // cond ::= exp MENORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("menorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // cond ::= exp MAYOR exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayor", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // cond ::= exp MAYORIGUAL exp 
            {
              AST RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("mayorIgual", e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // cond ::= cond AND cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("and", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // cond ::= cond OR cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("or", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // cond ::= cond IMPLICA cond 
            {
              AST RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST c1 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("implica", c1, c2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cond ::= NOT cond 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("not", c, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // cond ::= AP cond CP 
            {
              AST RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST c = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // listaEnteros ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // listaEnteros ::= IDENT COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("intIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // listaEnteros ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // listaEnteros ::= IDENT ASIG exp COMA listaEnteros 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigInt", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // listaEnteros ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayInt", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaEnteros",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // listaChar ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // listaChar ::= IDENT COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("charIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // listaChar ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // listaChar ::= IDENT ASIG exp COMA listaChar 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigChar", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // listaChar ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayChar", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // listaChar ::= IDENT AC NUM CC ASIG ALL arrayIni CLL 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("iniAsigArrayCh",new AST("iniArray", new AST(i, null, null),a), 
																			new AST("arrayChar", new AST(i, null, null), new AST(n,null,null))); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaChar",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // listaReales ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // listaReales ::= IDENT COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("floatIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // listaReales ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", null, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // listaReales ::= IDENT ASIG exp COMA listaReales 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigFloat", l, new AST(i,e,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // listaReales ::= IDENT AC NUM CC 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new AST("arrayFloat", new AST(i, null, null), new AST(n,null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaReales",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // listaBool ::= IDENT 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolIdent", null, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // listaBool ::= IDENT COMA listaBool 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST l = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("boolIdent", l, new AST(i, null, null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("listaBool",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // arrayIni ::= exp COMA arrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // arrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("arrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arrayIni",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // pArrayIni ::= exp COMA pArrayIni 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST a = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // pArrayIni ::= exp 
            {
              AST RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("pArrayIni", e, null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("pArrayIni",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expString ::= IDENT ASIG exp 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null), null); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expString ::= IDENT ASIG exp COMA expString 
            {
              AST RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		AST e = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		AST e2 = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST("asigString", new AST(i ,e ,null),  e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expString",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
